application {
  config {
    applicationType monolith
    authenticationType jwt
    baseName constructionmanagement
    blueprints []
    buildTool maven
    cacheProvider ehcache
    clientFramework angularX
    clientPackageManager npm
    clientTheme darkly
    clientThemeVariant dark
    creationTimestamp 1614519884249
    databaseType sql
    devDatabaseType h2Disk
    dtoSuffix DTO
    enableHibernateCache true
    enableSwaggerCodegen false
    enableTranslation true
    jhiPrefix jhi
    jhipsterVersion "7.0.0-beta.1"
    jwtSecretKey "YTMxMTE1NjYyY2Y0YTEzMmZlNzM3OGI3MWFmYTg3OTdjYzExMDIzODNlMTk2MThlYWM5N2FhYTAzMWMxM2MyZTA2MGU0MDExMWQwMDkzOWEyN2YzNTJiMWU4ODcxZDEwNjU5NWRhMzhmOWZjZmY2ZTNmNDUwZWY2ODUzNDE5YmE="
    languages [en, es]
    messageBroker false
    nativeLanguage en
    otherModules []
    packageName co.com.personalsoft
    prodDatabaseType postgresql
    reactive false
    searchEngine false
    serverPort 8080
    serviceDiscoveryType eureka
    skipClient false
    skipServer false
    skipUserManagement false
    testFrameworks []
    websocket false
    withAdminUi true
  }

  entities BuildOrder, BuildType, Citadel, Material, Requisition
}

entity BuildOrder {
  state BuildOrderState required
  start LocalDate required
  finish LocalDate required
}
entity BuildType {
  name String required unique
  duration Integer required min(1)
  amountMaterial1 Integer required min(0)
  amountMaterial2 Integer required min(0)
  amountMaterial3 Integer required min(0)
  amountMaterial4 Integer required min(0)
  amountMaterial5 Integer required min(0)
}
entity Citadel {
  name String required
  address String required unique
  start LocalDate required
  finish LocalDate required
}
entity Material {
  name String required unique
  acronym String required unique
  amountAvailable Integer required
}
entity Requisition {
  name String required
  coordinate String required pattern(/^\d+,\d+$/)
  state RequisitionState required
  date LocalDate required
}
enum BuildOrderState {
  PENDING,
  BUILDING,
  FINISHED
}
enum RequisitionState {
  FAILED,
  APPROVED
}

relationship OneToOne {
  BuildOrder{requisition(name) required} to Requisition
}
relationship ManyToOne {
  BuildType{material1(name) required} to Material
  BuildType{material2(name)} to Material
  BuildType{material3(name)} to Material
  BuildType{material4(name)} to Material
  BuildType{material5(name)} to Material
  Requisition{buildType(name) required} to BuildType
  Requisition{citadel(name) required} to Citadel
}

dto BuildOrder, BuildType, Citadel, Material, Requisition with mapstruct
paginate BuildOrder, BuildType, Citadel, Material, Requisition with pagination
service BuildOrder, BuildType, Citadel, Material, Requisition with serviceImpl
filter BuildOrder, BuildType, Citadel, Material, Requisition
